function updatetool(newtype,panel,skiptfo)
%Update display of tools and also callbacks of the graphical objects in
%the panel. If panel given then only update the panel, otherwise all image
%panels are updated.

global DATA SET

persistent stamp

if ~DATA.Testing
  %This section avoids double click and avoids problems with space triggering
  %twice
  if isempty(stamp)
    stamp = now;
  end;
  
  deltat = (now-stamp)*24*3600;
  stamp = now;
  
  %Check if clicked very recently
  if (deltat>0) && (deltat<0.1)
    return;
  end;
end

if DATA.Silent
  return;
end;
if nargin < 3
  skiptfo = false;
end
if nargin>0
  if isequal(DATA.CurrentTool,newtype)
    skiptfo = true; %Skip changing of this frame only mode
  end
  if isempty(SET)
    return
  end;
else
  newtype = DATA.CurrentTool;
  skiptfo = true;
end;
if isempty(newtype)
  newtype = 'select';
end;

%Select slices tool becomes orthoview tool if orthogonal view is present
if strcmp(newtype,'select') && numel(DATA.ViewPanelsType) >= 3 && ...
    isequal(DATA.ViewPanelsType{1},'ortho')
  newtype = 'orthoview';
end

% anyregrunning=zeros(1,length(SET));
% for tagno=1:length(SET)
%   if ~isempty(SET(tagno).StrainTagging) && isfield(SET(tagno).StrainTagging,'runningregistration')
%     anyregrunning(tagno)=SET(tagno).StrainTagging.runningregistration;
%   end
% end
% 
% if ismember(newtype,{'autocrop','crop'}) && any(anyregrunning)
%   mywarning('Unable to do crop while imageregistration is performed')
%   return
% end  
  
oldtype = DATA.CurrentTool;
DATA.CurrentTool = newtype;
  
%Reset mouse button functions
set(DATA.imagefig,'WindowButtonDownFcn','');
%set(DATA.imagefig,'WindowButtonMotionFcn','');

if length(SET)<1
  return;
end;

%If no mode selected then set LV as default
if isempty(DATA.Tools)
  %DATA.CurrentTheme='lv';
  %DATA.updateicons('lv');
end;

%Loop only over active panels
if nargin>1 && ~isempty(panel)
  panelstodo = panel;
else
  panelstodo = 1:length(DATA.ViewPanels);
end;


%Set this frame only mode depending on new tool
autolist = {'autolv', 'autoendo', 'autoepi', 'autorvendo', 'autolvct', ...
  'trackroi', 'autoscar', 'automar', 'autocropall','ctlvreconstruct','autorvct'};
asklist = {'autolv','autolvct','autorvct'};
%if strcmp(DATA.ProgramName,'SegmentCMR')
  notthisframeonlylist = {'trackroi','drawroi','putroi'}; %WAS: setdiff(autolist,'autoscar');
  % thisframeonlylist = {'drawendo','drawepi','drawrvendo','drawrvepi',...
  %   'drawroi','drawscar','drawmo','drawrubber','drawrubberpen',...
  %   'drawmarpen','drawmarrubberpen','drawmarrubber','putroi','interpendo',...
  %   'interpepi','interprvendo','interprvepi'};
  thisframeonlylist = {'drawendo','drawepi','drawrvendo','drawrvepi',...
    'drawscar','drawmo','drawrubber','drawrubberpen',...
    'drawmarpen','drawmarrubberpen','drawmarrubber','interpendo',...
    'interpepi','interprvendo','interprvepi'};
  derivedlaxlist = {'orthoview','select','move','moveall','contrast','click3d','measure'};
%end
if isempty(setdiff({oldtype,newtype},thisframeonlylist)) || ...
    isempty(setdiff({oldtype,newtype},notthisframeonlylist))
  skiptfo = true;
end
silent = false;
no = DATA.ViewPanels(DATA.CurrentPanel);
% if ~skiptfo
% switch newtype
% 	case notthisframeonlylist
%     if DATA.ThisFrameOnly
%       DATA.thisframeonly_Callback(false,silent);
%     end
% 	case thisframeonlylist
%     if ~DATA.ThisFrameOnly && ~any(cellfun(@numel,{SET.EchoTime}) > 1)
%       DATA.thisframeonly_Callback(true,silent);
%     end
%   case asklist
%     if DATA.ThisFrameOnly && SET(no).TSize > 1
% %       if yesno(['Currently in Single Frame Mode. ' ...
% %         'Change to do all timeframes?'])
%         DATA.thisframeonly_Callback(false,silent);
% %       end
%     end
% end
% end

if ~ismember(newtype, derivedlaxlist)
  %Do not set callbacks for HLA/VLA/GLA images unless type is in this list
  panelstodo = panelstodo(~ismember(DATA.ViewPanelsType(panelstodo),{'hla','vla','gla'}));
end

%Take care of automatic segmentation methods
if ismember(newtype, autolist)
  %Warn if dangerous image size
  if ismember(newtype, {'autorvendo'})
    automaxsz = 256*200;
    if SET(no).XSize*SET(no).YSize > automaxsz
      if ~yesno(['Warning: Auto segmentation of an image this size might ' ...
          'cause fatal memory errors. We strongly recommend that you '...
          'crop the image before auto segmenting. Proceed anyway?']);
        return
      end
    end
  end
  
  DATA.CurrentTool = 'select';

  switch newtype
    case 'autolv'
      lvsegmentation;%lv('segmentfullyautomatic_Callback');
    case 'autoendo'
      lvpeter('segmentendo_Callback');
    case 'autoepi'
      lvpeter('segmentepi_Callback');
    case 'autorvendo'
      rv('segmentrvendo_Callback');
    case 'autolvct'
      ct.ctlicensecheck('CTLVSegmentation');
    case 'autorvct'
      ct.ctlicensecheck('CTRVSegmentation');
    case 'ctlvreconstruct'
      ct.imagestacksct;
    case 'trackroi'
      flow('flowtrackroi_Callback');
    case 'autoscar'
      viability('viabilityautoewa');
    case 'automar'
      mar('auto_Callback');
    case 'autocropall'
      ask = true;
      autocropall(ask);
  end
end

%Set callbacks and highlight tool for all panels
for loop=panelstodo
  if DATA.ViewPanels(loop)>0

    panel = loop;
    if strcmp(newtype,'orthoview') && ...
        ~ismember(DATA.ViewPanelsType{panel},{'ortho','hla','vla','gla'})
      newtype = 'select';
    end
    %use remove nan is not properly initiated.
    myset([DATA.Handles.endointerp(panel)...
        DATA.Handles.epiinterp(panel)...
        DATA.Handles.rvendointerp(panel)...
        DATA.Handles.rvepiinterp(panel)],...
        'ButtonDownFcn',[]);
    %Check the new tool and update accordingly
    switch newtype
      case 'point'
%         if isfield(DATA.Tools,'point')
%           segment('highlighttool',DATA.Tools.point);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.scarcontour{panel} ...          
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...
          DATA.Handles.marcontour{panel}],'ButtonDownFcn',...
          sprintf('%s(''point_Buttondown'',%d)','segment',panel));
        myset([...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel}],'ButtonDownFcn',...
          sprintf('%s(''pointat_Buttondown'',%d)','annotationpoint',panel));
        load('pointers.mat');
        myset(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.point,...
          'pointershapehotspot',[7 7]);
        %set(DATA.fig,'pointer','cross');
      
      case 'measure'
%         if isfield(DATA.Tools,'measure')
%           segment('highlighttool',DATA.Tools.measure);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...
          DATA.Handles.marcontour{panel}],'ButtonDownFcn',...
          sprintf('%s(''measure_Buttondown'',%d)','segment',panel));
        myset([...
          DATA.Handles.measureline{panel}{1:numel(SET(DATA.ViewPanels(panel)).Measure)} ...
          DATA.Handles.measuretext{panel}(1:numel(SET(DATA.ViewPanels(panel)).Measure))], ...
          'ButtondownFcn',...
          sprintf('%s(''measurepoint_Buttondown'',%d)','segment',panel));
        if isa(DATA.GUISettings.MeasurePointer, 'string')||isa(DATA.GUISettings.MeasurePointer, 'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.MeasurePointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'PointerShapeCData',DATA.GUISettings.MeasurePointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.MeasurePointer.hotspot);
        end
        
      case 'click3d'
%         if isfield(DATA.Tools,'click3d')
%           segment('highlighttool',DATA.Tools.click3d);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...
          DATA.Handles.marcontour{panel}],'ButtonDownFcn',...
          sprintf('longaxistools(''showpointinallviews'',%d)',loop));
        set(DATA.imagefig,'pointer','arrow');
        
      case 'orthoview'
        %segment('highlighttool',DATA.Tools.selectslices);
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...
          DATA.Handles.marcontour{panel}],'ButtonDownFcn',...
          sprintf('segment(''orthoview_Buttondown'',%d)',loop));
        set(DATA.imagefig,'pointer','arrow');
        
      case 'select'
        %Slice selecttools
        %segment('highlighttool',DATA.Tools.selectslices);

        %Set up vector of handles
        h = [...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...
          DATA.Handles.marcontour{panel}];
        if ismember(DATA.ViewPanelsType{panel},{'montage','montagerow','montagefit','sax3','montagesegmented'})
          myset(h,'ButtonDownFcn',...
            sprintf('%s(''montage_Buttondown'',%d)','segment',panel));
          for roiloop = 1:numel(DATA.Handles.roicontour{panel})
          myset(...
            DATA.Handles.roicontour{panel}(roiloop), 'ButtonDownFcn', ...
            sprintf('%s(''selectroi_Buttondown'',%d,%d)','roi',panel,roiloop));
          end
          pause(0.05); %Sometimes does not get set properly without pause
        else
          myset(h,'ButtonDownFcn',...
            sprintf('%s(''normal_Buttondown'',%d)','segment',panel));
          for roiloop = 1:numel(DATA.Handles.roicontour{panel})
          myset([...
            DATA.Handles.roicontour{panel}(roiloop) ...
            DATA.Handles.roitext{panel}(roiloop)], 'ButtonDownFcn', ...
            sprintf('%s(''selectroi_Buttondown'',%d,%d)','roi',panel,roiloop));
          end
        end;
        
        myset([...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel}],'ButtondownFcn',...
          sprintf('%s(''measurepoint_Buttondown'',%d)','segment',panel));
        myset([...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel}],'ButtonDownFcn',...
          sprintf('%s(''pointat_Buttondown'',%d)','annotationpoint',panel));
        set(DATA.Handles.center{panel},'ButtonDownFcn',...
          sprintf('%s(''center_Buttondown'',%d)','segment',panel));
        set(DATA.imagefig,'pointer','arrow');
      
      case 'drawendo'
%         if isfield(DATA.Tools,'endopen')
%           segment('highlighttool',DATA.Tools.endopen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end  
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''endo'',1)','segment',panel));
        myset(DATA.Handles.endocontour(panel),'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''endo'',0)','segment',panel));
        if isa(DATA.GUISettings.DrawPointer,'string')||isa(DATA.GUISettings.DrawPointer,'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.DrawPointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'pointershapecdata',DATA.GUISettings.DrawPointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.DrawPointer.hotspot);
        end
      case 'drawepi'
%         if isfield(DATA.Tools,'epipen')
%           segment('highlighttool',DATA.Tools.epipen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''epi'',1)','segment',panel));
        myset(DATA.Handles.epicontour(panel),'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''epi'',0)','segment',panel));
        if isa(DATA.GUISettings.DrawPointer,'string')||isa(DATA.GUISettings.DrawPointer,'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.DrawPointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'pointershapecdata',DATA.GUISettings.DrawPointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.DrawPointer.hotspot);
        end
      case 'drawrvendo'
%         if isfield(DATA.Tools,'rvendopen')
%           segment('highlighttool',DATA.Tools.rvendopen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''rvendo'',1)','segment',panel));
        myset(DATA.Handles.rvendocontour(panel),'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''rvendo'',0)','segment',panel));
        if isa(DATA.GUISettings.DrawPointer,'string')||isa(DATA.GUISettings.DrawPointer,'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.DrawPointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'pointershapecdata',DATA.GUISettings.DrawPointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.DrawPointer.hotspot);
        end
        
      case 'drawrvepi'
%         if isfield(DATA.Tools,'rvepipen')
%           segment('highlighttool',DATA.Tools.rvepipen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''rvepi'',1)','segment',panel));
        myset(DATA.Handles.rvepicontour(panel),'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''rvepi'',0)','segment',panel));
        if isa(DATA.GUISettings.DrawPointer,'string')||isa(DATA.GUISettings.DrawPointer,'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.DrawPointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'pointershapecdata',DATA.GUISettings.DrawPointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.DrawPointer.hotspot);
        end
        
      case 'drawroi'
%         if isfield(DATA.Tools,'roipen')
%           segment('highlighttool',DATA.Tools.roipen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
%         %Unhide the tool
%         stateandicon=segment('iconson','hideroi');
%         stateandicon{2}.isindented=0;
%         stateandicon{2}.cdataDisplay=stateandicon{2}.cdata;
%         DATA.Handles.configiconholder.render
%         feval(stateandicon{2}.execute)
        
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''roi'',1)','segment',panel));
        myset([DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel}],'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''roi'',0)','segment',panel));

        if isa(DATA.GUISettings.DrawPointer,'string')||isa(DATA.GUISettings.DrawPointer,'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.DrawPointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'pointershapecdata',DATA.GUISettings.DrawPointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.DrawPointer.hotspot);
        end
        
      case 'drawscar'
%         if isfield(DATA.Tools,'scarpen')
%           segment('highlighttool',DATA.Tools.scarpen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''scar'')','segment',panel));
        if isa(DATA.GUISettings.DrawPointer,'string')||isa(DATA.GUISettings.DrawPointer,'char')
          set(DATA.imagefig,'pointer',DATA.GUISettings.DrawPointer);
        else
          set(DATA.imagefig,'pointer','custom',...
            'pointershapecdata',DATA.GUISettings.DrawPointer.cdata,...
            'pointershapehotspot',DATA.GUISettings.DrawPointer.hotspot);
        end
        
      case 'drawmo'
%         if isfield(DATA.Tools,'mopen')
%           segment('highlighttool',DATA.Tools.mopen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''mo'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');  
        
      case 'drawrubber'
%         if isfield(DATA.Tools,'rubber')
%           segment('highlighttool',DATA.Tools.rubber);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''manualdraw_Buttondown'',%d,''rubber'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');
        
      case 'drawrubberpen'
%         if isfield(DATA.Tools,'rubberpen')
%           segment('highlighttool',DATA.Tools.rubberpen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''rubberpen'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');
        
      case 'drawmarpen'
%         if isfield(DATA.Tools,'marpen')
%           segment('highlighttool',DATA.Tools.marpen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''drawmarpen'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');   
        
      case 'drawmarrubberpen'
%         if isfield(DATA.Tools,'marrubberpen')
%           segment('highlighttool',DATA.Tools.marrubberpen);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''drawmarrubberpen'')','segment',panel));
        set(DATA.imagefig,'pointer','cross'); 
        
      case 'drawmarrubber'
%         if isfield(DATA.Tools,'marrubber')
%           segment('highlighttool',DATA.Tools.marrubber);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...
          DATA.Handles.marcontour{panel} ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',...
          sprintf('%s(''manualdraw_Buttondown'',%d,''drawmarrubber'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');
        
      case 'endopin'
        segment('putpin_Callback',panel,'endo'); %Sets up
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.putpin,...
          'pointershapehotspot',[7 7]);
        
      case 'epipin'
        segment('putpin_Callback',panel,'epi'); %Sets up
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.putpin,...
          'pointershapehotspot',[7 7]);
        
      case 'rvendopin'
        segment('putpin_Callback',panel,'rvendo'); %Sets up
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.putpin,...
          'pointershapehotspot',[7 7]);
        
      case 'contrast'
%         if isfield(DATA.Tools,'contrastbrightness')
%           segment('highlighttool',DATA.Tools.contrastbrightness);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',...
          sprintf('segment(''contrast_Callback'',''down'',%d)',panel));
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.contrast,...
          'pointershapehotspot',[7 7]);
        
      case 'crop'
%         if isfield(DATA.Tools,'crop')
%           segment('highlighttool',DATA.Tools.crop);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          ],'ButtonDownFcn',sprintf('tools(''crop_Buttondown'',%d)',panel));
        set(DATA.imagefig,'pointer','cross');
        
      case 'move'
        myset(DATA.Handles.roicontour{panel},'ButtonDownFcn',...
          sprintf('segment(''move_Buttondown'',''roi'',%d)',panel));
        myset(DATA.Handles.roitext{panel},'ButtonDownFcn',...
          sprintf('segment(''move_Buttondown'',''roi'',%d)',panel));
        myset(DATA.Handles.endocontour(panel),'ButtonDownFcn',...
          sprintf('segment(''move_Buttondown'',''endo'',%d)',panel));
        myset(DATA.Handles.epicontour(panel),'ButtonDownFcn',...
          sprintf('segment(''move_Buttondown'',''epi'',%d)',panel));
        myset(DATA.Handles.rvendocontour(panel),'ButtonDownFcn',...
          sprintf('segment(''move_Buttondown'',''rvendo'',%d)',panel));
        myset(DATA.Handles.rvepicontour(panel),'ButtonDownFcn',....
          sprintf('segment(''move_Buttondown'',''rvepi'',%d)',panel));

%         myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
%           sprintf('segment(''move_Buttondown'',''image'',%d)',panel));
myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
          sprintf('segment(''buttondowntoggler'',''move'',%d)',panel));
        
myset([...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel}],'ButtonDownFcn',...
          sprintf('%s(''pointat_Buttondown'',%d)','annotationpoint',panel));
        myset([...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel}],'ButtondownFcn',...
          sprintf('%s(''measurepoint_Buttondown'',%d)','segment',panel));
      
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.move,...
          'pointershapehotspot',[7 7]);
         set(DATA.Handles.center{panel},'ButtonDownFcn',...
          sprintf('%s(''center_Buttondown'',%d)','segment',panel));
        %set(DATA.imagefig,'pointer','cross');
        
      case 'moveall'
        %myset(DATA.Handles.roicontour{panel},'ButtonDownFcn',...
        %  sprintf('segment(''moveall_Buttondown'',''roi'',%d)',panel));
        %myset(DATA.Handles.roitext{panel},'ButtonDownFcn',...
        %  sprintf('segment(''moveall_Buttondown'',''roi'',%d)',panel));
        myset(DATA.Handles.endocontour(panel),'ButtonDownFcn',...
          sprintf('segment(''moveall_Buttondown'',''endo'',%d)',panel));
        myset(DATA.Handles.epicontour(panel),'ButtonDownFcn',...
          sprintf('segment(''moveall_Buttondown'',''epi'',%d)',panel));
        myset(DATA.Handles.rvendocontour(panel),'ButtonDownFcn',...
          sprintf('segment(''moveall_Buttondown'',''rvendo'',%d)',panel));
        myset(DATA.Handles.rvepicontour(panel),'ButtonDownFcn',....
          sprintf('segment(''moveall_Buttondown'',''rvepi'',%d)',panel));
       % myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
       %   sprintf('segment(''moveall_Buttondown'',''image'',%d)',panel));
%         myset([...
%           DATA.Handles.pointp{panel} ...
%           DATA.Handles.pointo{panel} ...
%           DATA.Handles.pointtext{panel}],'ButtonDownFcn',...
%           sprintf('%s(''pointat_Buttondown'',%d)','annotationpoint',panel));
%         myset([...
%           DATA.Handles.measureline{panel}{:} ...
%           DATA.Handles.measuretext{panel}],'ButtondownFcn',...
%           sprintf('%s(''measurepoint_Buttondown'',%d)','segment',panel));
%       
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.move,...
          'pointershapehotspot',[7 7]);
         set(DATA.Handles.center{panel},'ButtonDownFcn',...
          sprintf('%s(''center_Buttondown'',%d)','segment',panel));
      case 'scaleROI'
        myset(DATA.Handles.roicontour{panel},'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''roi'',%d)',panel));
        myset(DATA.Handles.roitext{panel},'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''roi'',%d)',panel));
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.scale,...
          'pointershapehotspot',[7 7]);
         set(DATA.Handles.center{panel},'ButtonDownFcn',...
          sprintf('%s(''center_Buttondown'',%d)','segment',panel));
        
      case 'scale'
%         if isfield(DATA.Tools,'scale')
%           segment('highlighttool',DATA.Tools.scale);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset(DATA.Handles.roicontour{panel},'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''roi'',%d)',panel));
        myset(DATA.Handles.roitext{panel},'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''roi'',%d)',panel));
        myset(DATA.Handles.endocontour(panel),'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''endo'',%d)',panel));
        myset(DATA.Handles.epicontour(panel),'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''epi'',%d)',panel));
        myset(DATA.Handles.rvendocontour(panel),'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''rvendo'',%d)',panel));
        myset(DATA.Handles.rvepicontour(panel),'ButtonDownFcn',...
          sprintf('segment(''scale_Buttondown'',''rvepi'',%d)',panel));
        myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
          sprintf('segment(''buttondowntoggler'',''scale'',%d)',panel));
%         myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
%           sprintf('segment(''scale_Buttondown'',''image'',%d)',panel));
        myset([...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel}],'ButtonDownFcn',...
          sprintf('%s(''pointat_Buttondown'',%d)','annotationpoint',panel));
        myset([...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel}],'ButtondownFcn',...
          sprintf('%s(''measurepoint_Buttondown'',%d)','segment',panel));
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.scale,...
          'pointershapehotspot',[7 7]);
         set(DATA.Handles.center{panel},'ButtonDownFcn',...
          sprintf('%s(''center_Buttondown'',%d)','segment',panel));
        %set(DATA.imagefig,'pointer','cross');
        
      case 'dragepi'
%         if isfield(DATA.Tools,'dragepi')
%           segment('highlighttool',DATA.Tools.dragepi);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        set(DATA.imagefig,'pointer','arrow')
        myset(DATA.Handles.epicontour(panel),'ButtonDownFcn',...
          sprintf('segment(''dragepi_Buttondown'',''one'',%d)',panel));
        myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
          sprintf('segment(''dragepi_Buttondown'',''image'',%d)',panel));
        
      case 'dragepiallslices'
%         if isfield(DATA.Tools,'dragepiallslices')
%           segment('highlighttool',DATA.Tools.dragepiallslices);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        set(DATA.imagefig,'pointer','arrow')
        myset(DATA.Handles.epicontour(panel),'ButtonDownFcn',...
          sprintf('segment(''dragepi_Buttondown'',''allslices'',%d)',panel));
        myset(DATA.Handles.imagehandle(panel),'ButtonDownFcn',...
          sprintf('segment(''dragepi_Buttondown'',''image'',%d)',panel));
        
      case 'putroi'
%         if isfield(DATA.Tools,'putroi')
%           segment('highlighttool',DATA.Tools.putroi);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
% 
%         stateandicon=segment('iconson','hideroi');
%         stateandicon{2}.isindented=0;
%         stateandicon{2}.cdataDisplay=stateandicon{2}.cdata;
%         DATA.Handles.configiconholder.render
%         feval(stateandicon{2}.execute);
        
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...   
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          ],'ButtonDownFcn',...
          sprintf('roi(''roiputroi_Buttondown'',%d)',panel));
        load('pointers.mat');
        set(DATA.imagefig,...
          'pointer','custom',...
          'pointershapecdata',1+pointer.point,...
          'pointershapehotspot',[7 7]);
        %set(DATA.imagefig,'pointer','cross');
        
      case 'interpendo'
%         if isfield(DATA.Tools,'interpendo')
%           segment('highlighttool',DATA.Tools.interpendo);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''interpdraw_Buttondown'',%d,''endo'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');
        
      case 'interpepi'
%         if isfield(DATA.Tools,'interpepi')
%           segment('highlighttool',DATA.Tools.interpepi);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''interpdraw_Buttondown'',%d,''epi'')','segment',panel));
       set(DATA.imagefig,'pointer','cross');
       
      case 'interprvendo'
%         if isfield(DATA.Tools,'interprvendo')
%           segment('highlighttool',DATA.Tools.interprvendo);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.endocontour(panel) ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''interpdraw_Buttondown'',%d,''rvendo'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');
        
      case 'interprvepi'
%         if isfield(DATA.Tools,'interprvepi')
%           segment('highlighttool',DATA.Tools.interprvepi);
%         else
%           segment('highlighttool',DATA.Tools.selectslices);
%         end
        myset([...
          DATA.Handles.imagehandle(panel) ...
          DATA.Handles.center{panel} ...
          DATA.Handles.endointersectionline{panel} ...
          DATA.Handles.endointersectionpoints{panel} ...
          DATA.Handles.epiintersection{panel} ...
          DATA.Handles.rvendointersection{panel} ...
          DATA.Handles.rvepiintersection{panel} ...
          DATA.Handles.epicontour(panel) ...
          DATA.Handles.rvendocontour(panel) ...
          DATA.Handles.rvepicontour(panel) ...
          DATA.Handles.roicontour{panel} ...
          DATA.Handles.roitext{panel} ...
          DATA.Handles.scarcontour{panel} ...
          DATA.Handles.weightedscarcontour{panel} ...
          DATA.Handles.moextentcontour{panel} ...
          DATA.Handles.mocontour{panel} ...          
          DATA.Handles.marcontour{panel} ...                    
          DATA.Handles.pointp{panel} ...
          DATA.Handles.pointo{panel} ...
          DATA.Handles.pointtext{panel} ...
          DATA.Handles.planeintersectionline{panel} ...
          DATA.Handles.measureline{panel}{:} ...
          DATA.Handles.measuretext{panel} ...
          ],'ButtonDownFcn',sprintf('%s(''interpdraw_Buttondown'',%d,''rvepi'')','segment',panel));
        set(DATA.imagefig,'pointer','cross');
        	

    end;
    
    %copy contour buttondown to interpolation points.
    try
      myset(DATA.Handles.endointerp(panel),...
        'ButtonDownFcn',get(DATA.Handles.endocontour(panel),'ButtonDownFcn'));
      myset(DATA.Handles.epiinterp(panel),...
        'ButtonDownFcn',get(DATA.Handles.epicontour(panel),'ButtonDownFcn'));
      myset(DATA.Handles.rvendointerp(panel),...
        'ButtonDownFcn',get(DATA.Handles.rvendocontour(panel),'ButtonDownFcn'));
      myset(DATA.Handles.rvepiinterp(panel),...
        'ButtonDownFcn',get(DATA.Handles.rvepicontour(panel),'ButtonDownFcn'));
    catch %#ok<CTCH>
    end;

  end; %Found a panel that match NO
end; %Loop over panels
func=get(DATA.fig,'WindowButtonMotionFcn');
if strcmp(func,'')
  set(DATA.fig,'WindowButtonMotionFcn',@DATA.toggleplaceholdermotion);
end
%Set keypress functions
set(DATA.imagefig,'keypressfcn',@(fignum,evnt)segment('keypressed',fignum,evnt));

%Set buttondown function for overlay images
for hloop = find(ishandle(DATA.Handles.overlayhandle))
  bdfcn = get(DATA.Handles.imagehandle(hloop),'ButtonDownFcn');
  myset(DATA.Handles.overlayhandle(hloop),'ButtonDownFcn',bdfcn);
end
